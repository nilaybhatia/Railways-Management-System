CREATE DATABASE RAILWAYS_MP;
USE RAILWAYS_MP;

CREATE TABLE STATION(
	ID INT PRIMARY KEY AUTO_INCREMENT,
    NUM_PLATFORMS INT NOT NULL,
    NAME VARCHAR(25) UNIQUE NOT NULL,
    IS_JUNCTION BOOLEAN DEFAULT FALSE
);

CREATE TABLE TRAIN(
	NUMBER INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(25) UNIQUE NOT NULL,
    SPEED VARCHAR(15),
    SEATS INT DEFAULT 500,
    CONSTRAINT chk_speed CHECK (Speed IN ("FAST", "SLOW", "SUPERFAST"))
);

CREATE TABLE ROUTE(
	NUM_STOPS INT,
    OF_TRAIN_NUMBER INT PRIMARY KEY,
    CONSTRAINT OF_TRAIN_NUMBER FOREIGN KEY (OF_TRAIN_NUMBER) REFERENCES TRAIN(NUMBER)
);

CREATE TABLE CONSISTS_OF(
	CONSISTS_OF_STATION_ID INT,
    FOR_ROUTE INT,
    STATION_SEQUENCE_NUMBER INT NOT NULL,
    ARRIVAL_DATETIME DATETIME,
    DEPARTURE_DATETIME DATETIME,
    IS_SOURCE BOOLEAN NOT NULL,
    IS_DESTINATION BOOLEAN NOT NULL,
    CONSTRAINT CONSISTS_OF_STATION_ID FOREIGN KEY (CONSISTS_OF_STATION_ID) REFERENCES STATION(ID),
    CONSTRAINT FOR_ROUTE FOREIGN KEY (FOR_ROUTE) REFERENCES ROUTE(OF_TRAIN_NUMBER),
    PRIMARY KEY (CONSISTS_OF_STATION_ID, FOR_ROUTE)
);

DELIMITER $$
CREATE FUNCTION COUNT_STOPS(FOR_ROUTE_PARAM INT) 
RETURNS INT DETERMINISTIC
	BEGIN
		DECLARE CNT INT;
        SELECT COUNT(*) 
        INTO CNT
        FROM CONSISTS_OF 
        WHERE CONSISTS_OF.FOR_ROUTE = FOR_ROUTE_PARAM;
		RETURN CNT;
	END $$
DELIMITER ;
DROP FUNCTION COUNT_STOPS;
    

DELIMITER $$
CREATE TRIGGER SET_NUM_STOPS
AFTER INSERT ON CONSISTS_OF
FOR EACH ROW
	BEGIN
		DECLARE NUM_STOPS INT;
           SELECT COUNT_STOPS(NEW.FOR_ROUTE) INTO NUM_STOPS;
        -- SELECT COUNT(*) 
--         INTO NUM_STOPS
--         FROM CONSISTS_OF 
--         WHERE CONSISTS_OF.FOR_ROUTE = NEW.FOR_ROUTE;
        UPDATE ROUTE SET ROUTE.NUM_STOPS = NUM_STOPS WHERE ROUTE.OF_TRAIN_NUMBER = NEW.FOR_ROUTE;
    END $$
DELIMITER ;
DROP TRIGGER SET_NUM_STOPS;

CREATE TABLE TICKET(
	NUMBER INT PRIMARY KEY AUTO_INCREMENT,
    DATE_OF_JOURNEY DATE NOT NULL,
    STATUS VARCHAR(15),
    COST DOUBLE NOT NULL,
    TRAIN_NUMBER INT,
    CONSTRAINT CHK_STATUS CHECK (STATUS IN ("CONFIRMED", "WAITLISTED")),
    CONSTRAINT TRAIN_NUMBER FOREIGN KEY (TRAIN_NUMBER) REFERENCES TRAIN(NUMBER)
);

CREATE VIEW TRAIN_SEATS
AS 
SELECT NUMBER, NAME, SEATS FROM TRAIN;

DELIMITER $$
CREATE TRIGGER SET_STATUS
BEFORE INSERT ON TICKET
FOR EACH ROW
	BEGIN
		DECLARE REMAINING_SEATS INT;
		SELECT SEATS 
		INTO REMAINING_SEATS 
		FROM TRAIN_SEATS 
		WHERE TRAIN_SEATS.NUMBER = NEW.TRAIN_NUMBER;
		IF REMAINING_SEATS > 0 THEN
			SET NEW.STATUS = "CONFIRMED";
		ELSE
			SET NEW.STATUS = "WAITLISTED";
		END IF;
		UPDATE TRAIN_SEATS SET SEATS = SEATS - 1 WHERE TRAIN_SEATS.NUMBER = NEW.TRAIN_NUMBER AND SEATS > 0;
	END $$
DELIMITER ;


CREATE TABLE PERSON(
	ID INT PRIMARY KEY AUTO_INCREMENT,
    FNAME VARCHAR(25),
    LNAME VARCHAR(25),
    EMAIL VARCHAR(25),
    ADDRESS VARCHAR(25),
    PHONE VARCHAR(12)
);

CREATE TABLE PASSENGER(
	PASSENGER_ID INT PRIMARY KEY,
	CONSTRAINT PASSENGER_ID FOREIGN KEY (PASSENGER_ID) REFERENCES PERSON(ID) ON DELETE CASCADE
);

CREATE TABLE STATION_MANAGER(
	MGR_ID INT PRIMARY KEY,
    STATION_ID INT UNIQUE,
	CONSTRAINT MGR_ID FOREIGN KEY (MGR_ID) REFERENCES PERSON(ID) ON DELETE CASCADE,
    CONSTRAINT STATION_ID FOREIGN KEY (STATION_ID) REFERENCES STATION(ID) ON DELETE CASCADE,
    MGR_START_DATE DATE 
);

CREATE TABLE TICKET_COLLECTOR(
    EMP_ID INT PRIMARY KEY,
    TRAIN_ALLOTED_NUM INT NOT NULL,
    BADGE_NUMBER INT UNIQUE AUTO_INCREMENT,
    CONSTRAINT EMP_ID FOREIGN KEY (EMP_ID) REFERENCES PERSON(ID) ON DELETE CASCADE,
    CONSTRAINT TRAIN_ALLOTED_NUM FOREIGN KEY (TRAIN_ALLOTED_NUM) REFERENCES TRAIN(NUMBER) ON DELETE CASCADE
);

-- Does not work, ignore
-- CREATE FUNCTION DISJOINT_CHECK (IN SELF TABLE, IN OTHER1 TABLE, IN OTHER2 TABLE)
-- RETURNS VARCHAR(2)
-- 	DELIMITER $$
-- 	-- Trigger for making sure inserted PASSENGER is not STATION_MANAGER OR TICKET_COLLECTOR and similar
-- 	CREATE TRIGGER TR_SELF
-- 	BEFORE INSERT ON SELF
-- 	FOR EACH ROW
-- 		BEGIN
-- 			IF 
-- 				EXISTS (SELECT * FROM OTHER1 WHERE MGR_ID = NEW.PASSENGER_ID) OR 
-- 				EXISTS (SELECT * FROM TICKET_COLLECTOR WHERE EMP_ID = NEW.PASSENGER_ID) THEN
-- 			SIGNAL SQLSTATE '45000'
-- 			SET MESSAGE_TEXT = 'Passenger, Station manager and Ticket collector must be disjoint';
-- 			END IF;
-- 		END $$
-- 	DELIMITER ;
--     RETURN "OK"

DELIMITER $$

-- Trigger for making sure inserted PASSENGER is not STATION_MANAGER OR TICKET_COLLECTOR
CREATE TRIGGER TR_PASSENGER
BEFORE INSERT ON PASSENGER
FOR EACH ROW
	BEGIN
		IF 
			EXISTS (SELECT * FROM STATION_MANAGER WHERE MGR_ID = NEW.PASSENGER_ID) OR 
            EXISTS (SELECT * FROM TICKET_COLLECTOR WHERE EMP_ID = NEW.PASSENGER_ID) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Passenger, Station manager and Ticket collector must be disjoint';
        END IF;
    END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER TR_STATION_MANAGER
BEFORE INSERT ON STATION_MANAGER
FOR EACH ROW
	BEGIN
		IF 
			EXISTS (SELECT * FROM PASSENGER WHERE PASSENGER_ID = NEW.MGR_ID) OR 
            EXISTS (SELECT * FROM TICKET_COLLECTOR WHERE EMP_ID = NEW.MGR_ID) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Passenger, Station manager and Ticket collector must be disjoint';
        END IF;
    END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER TR_TICKET_COLLECTOR
BEFORE INSERT ON TICKET_COLLECTOR
FOR EACH ROW
	BEGIN
		IF 
			EXISTS (SELECT * FROM PASSENGER WHERE PASSENGER_ID = NEW.EMP_ID) OR 
            EXISTS (SELECT * FROM STATION_MANAGER WHERE MGR_ID = NEW.EMP_ID) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Passenger, Station manager and Ticket collector must be disjoint';
        END IF;
    END $$
DELIMITER ;


CREATE TABLE BOOKS(
	BOOKS_PASSENGER_ID INT,
    TICKET_NUMBER INT,
    CONSTRAINT BOOKS_PASSENGER_ID FOREIGN KEY (BOOKS_PASSENGER_ID) REFERENCES PASSENGER(PASSENGER_ID),
    CONSTRAINT TICKET_NUMBER FOREIGN KEY (TICKET_NUMBER) REFERENCES TICKET(NUMBER),
    PRIMARY KEY (BOOKS_PASSENGER_ID, TICKET_NUMBER)
);

-- ------------------------------------------
-- TABLES CREATION DONE, NOW INSERTING VALUES 
-- ------------------------------------------

INSERT INTO STATION(ID, NUM_PLATFORMS, NAME, IS_JUNCTION)
VALUES
	(1, 9, "Andheri", True),
	(2, 6, "CST", True),
	(3, 4, "Vile Parle", False),
	(4, 9, "Banglore", True),
	(5, 5, "Chennai", True),
	(6, 4, "Hyderabad", True),
	(7, 4, "Delhi", True),
	(8, 2, "Santa Cruz", False);
    
INSERT INTO TRAIN(NUMBER, NAME, SPEED, SEATS)
VALUES
	(DEFAULT, "Rajdhani", "Superfast", 400),
	(DEFAULT, "Avantika Express", "Fast", 300),
	(DEFAULT, "Nilgiri", "Slow", 250),
	(DEFAULT, "Nagavalli", "Superfast", 350),
	(DEFAULT, "Navyig", "Fast", 100),
	(DEFAULT, "Palace on Wheels", "Slow", 600),
	(DEFAULT, "Nellai", "Superfast", 5);

INSERT INTO ROUTE(OF_TRAIN_NUMBER)
VALUES
	(1),
    (2),
    (3),
    (4),
    (5),
    (6);
SELECT * FROM ROUTE;

-- Inserting values for the routes above

INSERT INTO CONSISTS_OF(CONSISTS_OF_STATION_ID, FOR_ROUTE, STATION_SEQUENCE_NUMBER, ARRIVAL_DATETIME, DEPARTURE_DATETIME, IS_SOURCE, IS_DESTINATION)
VALUES
	-- For 1st route(train number 1)
    -- Route 1 consists of 3 stations in that order -- Banglore, Chennai, Delhi
	(4, 1, 1, '2020-11-02 15:30:00', '2020-11-02 16:00:00', TRUE, FALSE),
    (5, 1, 2, '2020-11-02 21:00:00', '2020-11-02 21:05:00', FALSE, FALSE), -- Halts for 5 mins on this station
    (7, 1, 3, '2020-11-03 08:00:00', '2020-11-03 09:30:00', FALSE, TRUE),
	-- For 2nd route(train number 2)
    -- Route 2 consists of 5 stations in that order -- Chennai, CST, Andheri, Santa Cruz, Delhi
    (5, 2, 1, '2020-11-02 22:30:00', '2020-11-03 00:00:00', TRUE, FALSE),
    (2, 2, 2, '2020-11-03 11:30:00', '2020-11-03 11:35:00', FALSE, FALSE),
    (1, 2, 3, '2020-11-03 12:20:00', '2020-11-03 12:25:00', FALSE, FALSE),
    (8, 2, 4, '2020-11-03 12:30:00', '2020-11-03 12:32:00', FALSE, FALSE),
    (7, 2, 5, '2020-11-03 15:30:00', '2020-11-03 17:00:00', FALSE, TRUE),
    
    (5, 3, 1, '2020-11-02 15:30:00', '2020-11-02 16:00:00', TRUE, FALSE),
    (4, 3, 2, '2020-11-02 21:00:00', '2020-11-02 21:05:00', FALSE, FALSE), -- Halts for 5 mins on this station
    (7, 3, 3, '2020-11-03 08:00:00', '2020-11-03 09:30:00', FALSE, TRUE),

    (4, 4, 2, '2020-11-02 21:00:00', '2020-11-02 21:05:00', TRUE, FALSE), -- Halts for 5 mins on this station
    (7, 4, 3, '2020-11-03 08:00:00', '2020-11-03 09:30:00', FALSE, TRUE),
    
    (8, 5, 1, '2020-11-02 22:30:00', '2020-11-03 00:00:00', TRUE, FALSE),
    (2, 5, 2, '2020-11-03 11:30:00', '2020-11-03 11:35:00', FALSE, FALSE),
    (7, 5, 3, '2020-11-03 12:20:00', '2020-11-03 12:25:00', FALSE, FALSE),
    (5, 5, 4, '2020-11-03 12:30:00', '2020-11-03 12:32:00', FALSE, FALSE),
    (1, 5, 5, '2020-11-03 15:30:00', '2020-11-03 17:00:00', FALSE, TRUE),
    
    (7, 6, 1, '2020-11-02 15:30:00', '2020-11-02 16:00:00', TRUE, FALSE),
    (5, 6, 2, '2020-11-02 21:00:00', '2020-11-02 21:05:00', FALSE, FALSE), -- Halts for 5 mins on this station
    (4, 6, 3, '2020-11-03 08:00:00', '2020-11-03 09:30:00', FALSE, TRUE);
    
SELECT * FROM ROUTE;


    
INSERT INTO PERSON(ID, FNAME, LNAME, ADDRESS, EMAIL, PHONE)
VALUES
	(DEFAULT, "Nilay", "Bhatia", "Mumbai(W)", "bn@gmail.com", 8779450372),
    (DEFAULT, "ABC", "DEF", "Hyderabad(E)", "abc@gmail.com", 123456789),
    (DEFAULT, "QWE", "TYU", "Delhi(N)", "qwe@gmail.com", 9876543210),
    (DEFAULT, "ASD", "FGH", "Kerela(S)", "asd@gmail.com", 9876543210),
    (DEFAULT, "ZXC", "VBN", "Ahemdabad(W)", "zxc@gmail.com", 9876543210),
    (DEFAULT, "ZXC", "VBN", "Porbandar(W)", "zxc@gmail.com", 9876543210),
	(DEFAULT, "POI", "FGH", "Kolkata", "poi@gmail.com", "1239874567"),
    (DEFAULT, "Nilay", "FGH", "Mumbai", "nil@gmail.com", "1239874567");
    
INSERT INTO PASSENGER(PASSENGER_ID)
VALUES
	(3),
    (5);
    
INSERT INTO STATION_MANAGER(MGR_ID, STATION_ID, MGR_START_DATE)
VALUES
	(1, 2, "2020-11-03"),
    (2, 3, "2020-11-02"),
    (6, 1, "2019-11-01");

INSERT INTO TICKET_COLLECTOR(EMP_ID, TRAIN_ALLOTED_NUM, BADGE_NUMBER)
VALUES
	(4, 1, 101),
    (7, 1, 102),
    (8, 2, 103);


-- --------------------Queries/Functionalitites--------------

-- Booking ticket on a train
LOCK TABLE TICKET WRITE, BOOKS WRITE;
INSERT INTO TICKET(NUMBER, DATE_OF_JOURNEY, COST, TRAIN_NUMBER)
VALUES
	(DEFAULT, "2020-06-01", 1500.50, 3),
    (DEFAULT, "2020-06-02", 1400.50, 3),
    (DEFAULT, "2020-06-03", 1300.50, 2);
SELECT * FROM TICKET;

INSERT INTO BOOKS(BOOKS_PASSENGER_ID, TICKET_NUMBER)
VALUES
	(3, 1),
    (5, 2),
    (3, 3);
SELECT * FROM BOOKS;
UNLOCK TABLES;

-- Display all the stations for a train in sequence
-- SELECT * FROM ROUTE;
-- SELECT * FROM TRAIN;
-- SELECT * FROM STATION;
-- SELECT * FROM CONSISTS_OF;

SELECT
CONSISTS_OF.STATION_SEQUENCE_NUMBER, STATION.NAME, CONSISTS_OF.ARRIVAL_DATETIME, CONSISTS_OF.DEPARTURE_DATETIME
FROM TRAIN, ROUTE, CONSISTS_OF, STATION
WHERE   TRAIN.NUMBER = ROUTE.OF_TRAIN_NUMBER AND
		ROUTE.OF_TRAIN_NUMBER = CONSISTS_OF.FOR_ROUTE AND
        CONSISTS_OF_STATION_ID = STATION.ID AND
		TRAIN.NAME = 'Avantika Express' -- Replace with train passed from frontend
ORDER BY CONSISTS_OF.STATION_SEQUENCE_NUMBER;

-- Show all tickets booked for a particular train
LOCK TABLES TICKET READ, BOOKS READ, TRAIN READ;
SELECT TICKET.NUMBER AS TICKET_NUMBER, DATE_OF_JOURNEY, STATUS, COST FROM TICKET, TRAIN
WHERE TICKET.TRAIN_NUMBER = TRAIN.NUMBER AND
	  TRAIN.NAME = 'Nilgiri'; -- Replace with frontend name
UNLOCK TABLES;

-- Display all tickets for a passenger with all details like DOJ, Cost
SELECT TICKET.*, BOOKS.TICKET_NUMBER
FROM TICKET
INNER JOIN BOOKS
ON BOOKS.TICKET_NUMBER = TICKET.NUMBER
WHERE BOOKS_PASSENGER_ID = 3;

-- Given 2 stations, return all trains that halt on both of them (in order)(Buggy)
-- Eg. List all trains using which you can go from Chennai to Delhi
CREATE VIEW CONSISTS_OF_STATION_INNER_JOIN
AS
SELECT * FROM CONSISTS_OF, STATION
WHERE STATION.ID = CONSISTS_OF_STATION_ID
ORDER BY FOR_ROUTE, STATION_SEQUENCE_NUMBER;
SELECT * FROM CONSISTS_OF_STATION_INNER_JOIN;

-- nOT WORKING
-- DELIMITER $$
-- BEGIN
-- 	DECLARE EARLIER_NUM INT;
-- 	DECLARE LATER_NUM INT;
-- 	SELECT STATION_SEQUENCE_NUMBER INTO EARLIER_NUM FROM CONSISTS_OF_STATION_INNER_JOIN WHERE NAME = 'Chennai' LIMIT 1;
-- 	SELECT STATION_SEQUENCE_NUMBER INTO EARLIER_NUM FROM CONSISTS_OF_STATION_INNER_JOIN INTO LATER_NUM WHERE NAME = 'Delhi' LIMIT 1;
-- END $$
-- DELIMITER ;

SELECT * FROM TRAIN 
WHERE TRAIN.NUMBER IN (
	SELECT DISTINCT FOR_ROUTE FROM CONSISTS_OF_STATION_INNER_JOIN
    WHERE 'Chennai' IN (SELECT NAME FROM CONSISTS_OF_STATION_INNER_JOIN) AND 
    'Delhi' IN (SELECT NAME FROM CONSISTS_OF_STATION_INNER_JOIN) -- AND
    -- EARLIER_NUM < LATER_NUM
);

-- Getting a list of all trains halting at a particular station on a particular date(DAILY TIMETABLE FEATURE)
SELECT TRAIN.*, CONSISTS_OF.ARRIVAL_DATETIME, CONSISTS_OF.DEPARTURE_DATETIME
FROM TRAIN, CONSISTS_OF, STATION
WHERE STATION.ID = CONSISTS_OF_STATION_ID AND
	  FOR_ROUTE = TRAIN.NUMBER AND
      STATION.NAME = 'Delhi' AND
      (DATE(CONSISTS_OF.ARRIVAL_DATETIME) = '2020-11-03' OR DATE(CONSISTS_OF.DEPARTURE_DATETIME) = '2020-11-03');
      

-- Filter all trains by time of departure in a particular range
SELECT DISTINCT TRAIN.*
FROM TRAIN, CONSISTS_OF
WHERE TRAIN.NUMBER = CONSISTS_OF.FOR_ROUTE AND
	  DEPARTURE_DATETIME >= '2020-11-02 21:00:00' AND DEPARTURE_DATETIME <= '2020-11-03 12:30:00';
	  

-- Disjointness checkS
INSERT INTO PASSENGER(PASSENGER_ID)
VALUES
	(8);
    
INSERT INTO STATION_MANAGER(MGR_ID, STATION_ID, MGR_START_DATE)
VALUES
	(5, 2, "2020-02-03");

INSERT INTO TICKET_COLLECTOR(EMP_ID, TRAIN_ALLOTED_NUM, BADGE_NUMBER)
VALUES
	(2, 1, 101);
    
DROP DATABASE RAILWAYS_MP;